/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { MeshReflectorMaterial, MeshTransmissionMaterial, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useScrollbar } from '@14islands/r3f-scroll-rig'

type GLTFResult = GLTF & {
    nodes: {
        model: THREE.Mesh
    }
    materials: {
        model: THREE.MeshStandardMaterial
    }
}

interface LogoProps extends Partial<THREE.Group> { }

export const Logo: React.FC<LogoProps> = (props) => {
    const { nodes, materials } = useGLTF('/shades-compressed.glb') as any as GLTFResult
    const groupRef = useRef<THREE.Group>(null)

    //  moves the geometry so its center of bounding box is at the local origin.
    const geometry = nodes.model.geometry.clone()
    geometry.center()

    const lenis = useScrollbar();

    useEffect(() => {
        if (lenis?.__lenis) {
            lenis.__lenis.on('scroll', ({ progress, velocity }) => {
                if (!groupRef.current) return;
                // const scaleFactor = 0.0125;
                // const scale = (velocity * scaleFactor) + 1;
                // const cappedScale = Math.min(Math.max(scale, 1), 2);


                // groupRef.current.scale.set(cappedScale, cappedScale, cappedScale)
                groupRef.current.rotation.y = progress * (Math.PI * 2)

            })
        }
    }, [lenis])

    return (
        <group {...props} dispose={null} ref={groupRef}>
            <mesh scale={100} castShadow receiveShadow
                geometry={geometry}
                // material={materials.model}
                >
                <MeshTransmissionMaterial
                    roughness={0.15}
                    thickness={0.4}
                    anisotropicBlur={15}
                    ior={1.31}
                    reflectivity={1}
                    chromaticAberration={0.03}
                    transmission={1}
                />
            </mesh>
        </group>
    )
}

useGLTF.preload('/shades-compressed.glb')
